/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a Message.
 */
class Message {
  /**
   * Create a Message.
   * @member {uuid} [id] Unique identifier for the message.
   * @member {array} [from] The sender of the message.
   * @member {array} [to] The message’s recipient.
   * @member {array} [cc] Carbon-copied recipients for email messages.
   * @member {array} [bcc] Blind carbon-copied recipients for email messages.
   * @member {date} [received] The datetime that this message was received by
   * Mailosaur.
   * @member {string} [subject] The message’s subject.
   * @member {object} [html] Message content that was sent in HTML format.
   * @member {array} [html.links]
   * @member {array} [html.images]
   * @member {string} [html.body]
   * @member {object} [text] Message content that was sent in plain text
   * format.
   * @member {array} [text.links]
   * @member {array} [text.images]
   * @member {string} [text.body]
   * @member {array} [attachments] An array of attachment metadata for any
   * attached files.
   * @member {object} [metadata]
   * @member {array} [metadata.headers] Email headers.
   * @member {string} [server] Identifier for the server in which the message
   * is located.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Message
   *
   * @returns {object} metadata of Message
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Message',
      type: {
        name: 'Composite',
        className: 'Message',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          from: {
            required: false,
            serializedName: 'from',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MessageAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'MessageAddress'
                  }
              }
            }
          },
          to: {
            required: false,
            serializedName: 'to',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MessageAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'MessageAddress'
                  }
              }
            }
          },
          cc: {
            required: false,
            serializedName: 'cc',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MessageAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'MessageAddress'
                  }
              }
            }
          },
          bcc: {
            required: false,
            serializedName: 'bcc',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MessageAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'MessageAddress'
                  }
              }
            }
          },
          received: {
            required: false,
            serializedName: 'received',
            type: {
              name: 'DateTime'
            }
          },
          subject: {
            required: false,
            serializedName: 'subject',
            type: {
              name: 'String'
            }
          },
          html: {
            required: false,
            serializedName: 'html',
            type: {
              name: 'Composite',
              className: 'MessageContent'
            }
          },
          text: {
            required: false,
            serializedName: 'text',
            type: {
              name: 'Composite',
              className: 'MessageContent'
            }
          },
          attachments: {
            required: false,
            serializedName: 'attachments',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AttachmentElementType',
                  type: {
                    name: 'Composite',
                    className: 'Attachment'
                  }
              }
            }
          },
          metadata: {
            required: false,
            serializedName: 'metadata',
            type: {
              name: 'Composite',
              className: 'Metadata'
            }
          },
          server: {
            required: false,
            serializedName: 'server',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Message;
